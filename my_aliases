#!/usr/bin/env bash
#############
# Developer #
#############

alias dc="docker-compose"
#alias tf="terraform"
alias g="git"
alias v="vagrant"
alias o="open"
alias head="head -n 40"

# For cleaning out projects, looks in directory and reads readme
function ww {
  folder_name=$1
  vi $1/README.md
}


# Encrypt file with password
# Usage: enc_with_pass records.zip
alias enc_with_pass="gpg --symmetric --cipher-algo AES256"

# VPN action
# Route traffic to this host through another server via an ssh tunnel
# See this_machine for other helpful examples
# alias do_vpn_to_esxi="sshuttle -v -r ssh-server 192.168.1.100"
#alias do_vpn="sshuttle -v -r jump-box -N 0/0"
#alias do_vpn="sshuttle -v -r jump-box -x 10.0.0.0/8 -N 0/0"
# sshuttle -v -r torpedo -N 0/0

# https://www.ssh.com/ssh/tunneling/example
# The machine running the below command will have connections to it's port 32000 tunnled through jump-box to it's localhost:32001.  change localhost to some other server as needed :)
#ssh -L 32000:localhost:32001 jump-box  "tail -f /dev/null"
# ssh -L 5900:localhost:5913 gitlab-runner-alpha  "tail -f /dev/null"
# ssh -L 8080:192.168.3.11:80 router "tail -f /dev/null"


# https://askubuntu.com/questions/897907/how-to-tunnel-and-browse-the-web-on-remote-network
# ssh -p 22 -i /home/path_to_privkey -L 12666:localhost:80 -l username xx.xxx.xxx.xxx
# ssh -p 22 -i ~/.ssh/id_rsa -L 12666:localhost:443 torpedo
# ssh -i ~/.ssh/id_rsa -L 12666:10.152.183.142:443 torpedo

# OMG, typing ~.<enter> will exit you from an ssh session that has become non-responsive!!!!!

# Kubernetes Aliases
alias k="kubectl"
alias kg="kubectl get"
alias kga="kubectl get all"
alias kgall="kubectl get service,ingress,pod,deployment,daemonset,networkpolicy,pvc,secret,configmap,persistentvolumeclaim"
alias kgp="kubectl get pods --show-kind"
alias kd="kubectl describe"
# Filter logs through this for slight improvements: sed 's/^[^\w]*\]//' 
alias kl="kubectl logs"
#alias knamespace="kubectl config set-context --current --namespace"
function knamespace {
  kubectl config set-context --current --namespace $1
}

function ktach {
  POD_NAME=$1
  SHELL_PATH=${2:-/bin/bash}
  if [ -z $POD_NAME ]; then
    echo "This command will attach you to a running pod and launch a shell."
    echo "Usage: $ ktach POD_NAME [SHELL_PATH]"
    return
  fi

  kubectl exec --stdin --tty $POD_NAME -- $SHELL_PATH;
}
# Manually run a cronjob
function kjob {
  JOB_NAME=$1
  kubectl delete job manual-${JOB_NAME} --ignore-not-found && kubectl create job --from=cronjob/${JOB_NAME} manual-${JOB_NAME}
}

# VM Aliases
alias vs="vagrant ssh"
alias vm-list="vboxmanage list vms -l | awk '/^Name:  / || /^State: / {if (\$1 ==\"State:\") print \"  - \" \$2 \" \" \$3; else print \$2; }'"
alias vm-list-hdds="vboxmanage list hdds | awk '/^Location:  / || /^Capacity: / {if (\$1 ==\"Capacity:\") {printf \"  -$1 \"; printf \$2 \" \";} print \$3}'"
alias vm-start="vboxmanage startvm --type headless"


# Beautify JSON objects
# $  curl -s http://localhost:3000/publishing_houses | pj
alias pj="python -m json.tool | jq '.'"

# Use json syntax highlighting in vim
#   :set syntax=json
#   :color delek

# Grep/ Find

# Search through a directory for matches, show above and below 3 lines!
# IE find within project!
# grep -irn -C 3 "String to search for in directory" .
function find-within-project { grep -irn -C 3 "$1" . ; }
function search-recursively { grep -irn --exclude "node_modules" -C 3 "$1" . ; }

# This does a recursive search for a file containing all of the 3 matching keywords, deploy, static, and s3.  It doesn't search 
# folders named node_modules or .git which is a waste of time
#grep -rlZ --exclude-dir "node_modules" --exclude-dir ".git" "deploy" | xargs -r0 grep -l "static" | xargs -r0 grep -l "s3"


# Kills all instances of ruby
function kill-ruby { ps -A|grep ruby |awk '{print $1}' | xargs kill -s 9 ; }

#alias yaml2json="ruby -ryaml -rjson -e 'puts JSON.pretty_generate(YAML.load(ARGF))'"
function yaml2json() {
  ruby -ryaml -rjson -e 'puts JSON.pretty_generate(YAML.load(ARGF))' ${@}
}

# tests if a page is being cached by showing you headers
alias tcache="curl -svo /dev/null "

# set the terminal tab's title, e.g. $ title git
function title-with-process {
  # ♐ git
  msg=$*

  [ $1 == "git" ] && msg="♐ git"
  
  echo -ne "\033]0;"${msg}"\007"
}

function title {
  # ♐ git
  msg=$1

  [ $1 == "git" ] && msg="⚕️ git"
  [ $1 == "frontend" ] && msg="♐"
  [ $1 == "backend" ] && msg="🍑"
  
  echo -ne "\033]0;"${msg}"\007"
}

# instant web server in the current directory
#python -m SimpleHTTPServer
# this is so clever...  ruby -r un requires the 'un' library... which
# provides the command 'httpd' which is a wrapper for using weBrick
#alias rhttp='rvmsudo ruby -run -e httpd .'
alias rhttp='ruby -run -e httpd .'

# Use this cmd to dl a web page and it's css/js file if you're not sure where a string comes from
alias dl_resources_for_grepping='wget -p -k http://localhost:3000'

#
# Rails
#

alias r='rails'
# To properly test, make sure you're running 'spork' in another terminal window
alias rt='bin/rails test'
alias test-rails='bundle exec rspec --drb spec/'
alias bundle-install='bundle install --without development test'
alias be='bundle exec'
alias ber='bundle exec rake'
alias bec='bundle exec cucumber'

#
# Go
#

alias gotest="set -o pipefail && go test ./... -json | tparse -all"
color_scheme="sed -i 's/: black/: white/g' c.html && sed -i 's/: rgb(44, 212, 149)/: rgb(107 182 77)/g' c.html"
alias gocover="go test -coverprofile=c.out ./... && go tool cover -html=c.out -o c.html && eval \"${color_scheme}\" && open c.html"


# http://collectiveidea.com/blog/archives/2014/02/18/a-simple-pair-programming-setup-with-ssh-and-tmux/
alias pairing-session-start='tmux new-session -s pair'
alias pairing-session-join='tmux attach -t pair'

# Run a single cucumber test
# cucumber features/users/create_content.feature --require features

#############
# Git Stuff #
#############

# Most Used:
alias glg="git log --graph --branches --tags --remotes --oneline --decorate"
alias gis="git status"
alias gcm="git commit -m"
alias ad="git add"
alias gam="git add -A; git commit --amend"
alias gs="git show"

alias c="git checkout"
declare -f __git_complete > /dev/null && \
  __git_complete c _git_checkout  # auto-completion

alias d="git diff"
declare -f __git_complete > /dev/null && \
  __git_complete d _git_diff  # auto-completion

# There's one for work handles defined elsewhere ^.<
alias git_setup_author="git config --local user.email no@email.plz && git config --local user.name TheNotary"

# Committing
#alias ga="git add -au" # adds all files and removed files to staging
alias git-clear-remote-branch-names="git branch -r |sed 1d | xargs git branch -dr"
alias gundo-last-commit-retain-progress='git stash && git reset --hard && git stash pop'
alias gundo-commit-on-remote='git push origin :master'
# Git Root:  Go to the root of the project directory
alias gr='cd "$(git rev-parse --show-toplevel)"'
alias gpl='git pull origin'
alias gps='git push origin'

# Monitoring:
alias gsnm='git branch --no-merged'  # view branches that still need to be merged
# d --color-words

alias gsnm='git branch --no-merged' # show branches you need to merge still
# graphical commit history/log
alias glg2="git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"
alias gdn='git diff --name-only'
# This was a crucial command for diffing two different branches by files that differ
alias branch_diff="d left-branch right-branch --name-only |grep -v casset | grep -v .lock | grep -v bin"
# $  git diff --color-words

# Watching and unwatching:
alias gunwatch='git update-index --assume-unchanged'
alias gwatch='git update-index --no-assume-unchanged'
gunwatched() { git ls-files -v | grep '^[[:lower:]]'; }
gwatchall() { gunwatched | xargs -L 1 -I % sh -c 'git watch `echo % | cut -c 2-`'; }

# Research:
alias gdump="git log --oneline -p > /tmp/git/huge" # dump out contents of every file at each commit.  Allows searching
alias gago="git whatchanged --since='1 year ago'" # Looks at the diff since a year ago
ghp() { git checkout $(git rev-list HEAD..master | tail -n 1); } #incriment HEAD, the opposit of git checkout HEAD^
alias ghm="git checkout HEAD^"  # Git Head Minus

alias gdf="git diff --color"
alias gdfh="git diff --color HEAD"
# tags
alias gat="git tag -a 'v1.0.0' -m 'this version works well'"
alias gct="git checkout -t" # checkout specific tag
# git push --tags
# git push origin :refs/tags/tag_name_deleted
# Merging
alias gir="git rebase" # puts all your commits (in your current branch) ontop of the branch specified
alias gmr="git merge" # merges the specified branch onto the current branch.. creating a mrege commit
# This will delete any locally tracked remote branches if they're removed from origin
alias gbc="git fetch origin --prune"

# Multi-Repo Helpers:
function git_subdir_fetch() {
  \
    find . -type d -depth 1 -exec sh -c ' \
      git --git-dir={}/.git --work-tree=$PWD/{} fetch origin master ' \;
}

function git_subdir_show_branch() {
  \
    find . -type d -depth 1 -exec sh -c ' \
      git --git-dir={}/.git --work-tree=$PWD/{} branch --show-current \
        | tr -d "\n" \
      && printf "\t{} \n" \
    ' \; \
    | column -t \
    | sort -t: -k2
}

function git_subdir_commits_behind() {
  \
    find . -type d -depth 1 -exec sh -c ' \
      git --git-dir={}/.git --work-tree=$PWD/{} rev-list --left-right --count master..origin/master \
        | cut -f1 \
        | tr -d "\n" \
        && printf " {}\n" ' \; \
    | sort
}

function git_subdir_dirty_check() {
  \
    find . -type d -depth 1 -exec sh -c ' \
      git --git-dir={}/.git --work-tree=$PWD/{} diff --quiet --exit-code \
        || printf "{} is dirty\n" ' \; \
    | sort
}

function git_subdir_update() {
  \
    find . -type d -depth 1 -exec \
      git --git-dir={}/.git --work-tree=$PWD/{} fetch origin master:master --update-head-ok \;
}

# e.g. git_subdir_commit jenkins-migration "updates jenkinsfile for migration" | tee /tmp/a
function git_subdir_commit() {
  export branch_name=$1
  export commit_message=$2

  git_repos=$(find . -type d -depth 2 -name .git  | cut -c3- | awk -v n=5 '{ print substr($0, 1, length($0)-n) }')

  for repo in $git_repos; do
    if ( ! git --git-dir=$PWD/${repo}/.git --work-tree=$PWD/${repo} diff --quiet --exit-code ); then
      echo "[[ ${repo} ]] dirty working dir found, making commit"

      git --git-dir=${repo}/.git --work-tree=$PWD/${repo} checkout -b ${branch_name}
      true \
        && git --git-dir=${repo}/.git --work-tree=$PWD/${repo} add -A \
        && git --git-dir=${repo}/.git --work-tree=$PWD/${repo} commit -m "$commit_message" \
        && git --git-dir=${repo}/.git --work-tree=$PWD/${repo} push origin $branch_name
    else
      true
      # echo "${repo} SKIPPED"
    fi
    echo ""
  done
}








# git_diff_follow
# do a head follow on the /tmp/diff file to watch the diff go
alias git_diff_follow="watch -c -n 1 git diff" #harken_develop-rob jruby-normalizing config/secrets.yml
declare -f __git_complete > /dev/null && \
  __git_complete git_diff_follow _git_diff  # auto-completion

# Ignoring Files

# A .gitignore that isn't shared on the public repo
alias vilocalignor='vi .git/info/exclude'
# This tells all repos on your machine to ignore the files listed in
# .gitignore_global
# https://help.github.com/articles/ignoring-files/#create-a-global-gitignore
alias git-ignore-awesome="git config --global core.excludesfile ~/.gitignore_global"


# THIS is very dangerous!  It will change the history of a repository to correct the email addresses for
# committers...
# git_correct_email incorrect_email correct_name correct_email
git_correct_email() {
  if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]; then
    echo "You must specify all three inputs"
    echo "usage:  git_correct_email incorrect_email correct_name correct_email"
    return 1
  fi
  git filter-branch -f --env-filter "OLD_EMAIL='$1';CORRECT_NAME='$2';CORRECT_EMAIL='$3'"'
    if [ "$GIT_COMMITTER_EMAIL" = "$OLD_EMAIL" ]
    then
        export GIT_COMMITTER_NAME="$CORRECT_NAME"
        export GIT_COMMITTER_EMAIL="$CORRECT_EMAIL"
    fi
    if [ "$GIT_AUTHOR_EMAIL" = "$OLD_EMAIL" ]
    then
        export GIT_AUTHOR_NAME="$CORRECT_NAME"
        export GIT_AUTHOR_EMAIL="$CORRECT_EMAIL"
    fi
  ' --tag-name-filter cat -- --branches --tags
}

# delete file from git repo without deleting
# git rm --cached mylogfile.log

# git show emails
#alias gse="git log --format='%aE' | sort -u"
# Show commit counts
alias gse="git shortlog -e -s -n"


# Ammend git commits (reuse the commit message for additional changes) by this
# $  git commit --allow-empty -m "todo: fix thing"
# $  git commit -a --amend

# Colaborating

# Bring lagging origin up to state of upstream
# $  git fetch upstream
# $  git reset --hard upstream/master


# hub aliases
alias hubshow='cat ~/.config/hub'
alias hubclear='rm ~/.config/hub'
alias hubmk='hub create' # creates a remote repo

#mongodb aliases
alias mongoshell="mongo --shell --host $MONGODB_DEVELOPMENT_HOST --port $MONGODB_DEVELOPMENT_PORT -u $MONGODB_DEVELOPMENT_USERNAME -p $MONGODB_DEVELOPMENT_PASSWORD $MONGODB_DEVELOPMENT_DB"

##############
# Linux user #
##############

# List
alias l='ls -G'

# Video
# DL all videos of a youtube playlist BY PLAYLIST ID (eg PL0zVEGEvSaeFSwPn06GKArptSxiP1Gff8)
dl-playlist-by-id() { youtube-dl -cit -f best https://www.youtube.com/watch?list=${1};}
# Parse a web page's source for all it's embedded youtube vids and return a list of it's video ids
# parse-page-for-embeds source.txt | xargs -n1 youtube-dl
parse-page-for-embeds() { grep -oP 'https:\/\/www.youtube.com([^"]*)' ${1} | sed  's/https\:\/\/www\.youtube\.com\/embed\///'; }

# Privacy
alias anongo='sudo service openvpn start; sudo ufw enable;'
alias anonstop='sudo service openvpn stop; sudo ufw disable;'

# Package Maintenance
alias latest-installs='grep " install " /var/log/dpkg.*'
alias latest-upgrades='grep " upgrade " /var/log/dpkg.*'
alias latest-removes='grep " remove " /var/log/dpkg.*'

alias minecraft="java -jar ~/bin/minecraft/minecraft.jar &"

# http://ubuntuforums.org/showthread.php?t=564301
use-network-apt-cacher() { echo 'Acquire::http::Proxy "http://hostname:3142";' | sudo tee /etc/apt/apt.conf.d/01proxy; }
use-direct-apt-querying() { echo 'Acquire::http::Proxy "http://";' | sudo tee /etc/apt/apt.conf.d/01proxy; }

# re-format and partition SDCARD
# gparted

# compress file
alias compress-file-with-zip='zip my.zip file'
alias decompress-file-with-zip='unzip my.zip'

# compress image
alias compress-image-file='jpegoptim -m70'

# Service management
alias s='sudo service'


# Get Gateway
# netstat -rn | grep -e '^0\.0\.0\.0 \s*[0-9]*\.[0-9]*\.[0-9]\.[0-9].*[ew].*[0-9]*$' |awk '{print $2}'
get-gateway() { netstat -rn | grep -e '^0\.0\.0\.0 \s*[0-9]*\.[0-9]*\.[0-9]\.[0-9].*[ew].*[0-9]*$' |awk '{print $2}'; }


# Backups
# Don't use this, see the script backup_self
sync-files-to-backup() {
  rsync -avrh /media/kentos/f39c6a7b-0c94-4489-953b-dccb16f1037c/home/phill phill@192.168.0.56:/storage/backups/tesla/home/phill ;
}

# File System
fs-rename-files-to-linux-style() {
  ls | while read -r FILE
  do
    mv -v "$FILE" `echo $FILE | tr ' ' '_' | tr -d '[{}(),\!]' | tr -d "\'" | tr '[A-Z]' '[a-z]' | sed 's/_-_/_/g'`
  done ;
}

alias tcpdump_dns="sudo tcpdump -i any port 53"

# Write raspbian to memory card
# dd bs=4M if=2015-02-16-raspbian-wheezy.img of=/dev/mmcblk0

# Write ubuntu to USB stick
# dd bs=4M if=ubuntu.iso of=/dev/sdc

# DL a file from another machine via ssh
# dl-ssh() { scp server:/file.txt . }

#  ssh-copy-id -i identity_file remote_host


############
# sysadmin #
############

# apt-get update but just for a speicifc repository as defined in sources.list.d, e.g. private.list
update-repo() {
    for source in "$@"; do
        sudo apt-get update -o Dir::Etc::sourcelist="sources.list.d/${source}" \
        -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"
    done
}


# launch_vpnd
alias vpnd="docker run --volumes-from $OVPN_DATA -p 1194:1194/udp --privileged -e DEBUG=1 kylemanna/openvpn"

# Follow journal logs for a service, pneumonic: "Jay, F U!"
alias jfu="sudo journalctl -fu"
# Similar but show restart boundries
alias jxu="sudo journalctl -xu" 

# restore a burp backup to a file
alias burp_restore="burp -C obelisk -a r -d /storage/dumps_of_burp/obelisk"

# To backup
alias burp_backup="sudo burp -a b"

# Network monitoring
#
# sudo darkstat -i wlan0 ;  lynx 127.0.0.1:667
#
# sudo netstat -tpn wlan0
#
# sudo nload wlan0
#
# # throttle bandwidth
# sudo wondershaper wlan0 500 500 # reasonable
# sudo wondershaper wlan0 256 128 # go hella slow
# sudo wondershaper wlp8s0 20480 700 # allow uploading without shutting down internet
# sudo wondershaper enp7s0 20480 700 # allow uploading without shutting down internet
# sudo wondershaper clear wlan0
#
# http://serverfault.com/questions/407968/how-find-out-what-or-who-is-using-my-bandwidth

# Define a bash function
say-hello() { echo "hello ${1}" ;}

# convert unix line endings to dos
# awk 'sub("$", "\r")' unixfile.txt > winfile.txt
# All .js files in directory
# find . -name *.js |xargs dos2unix


# Database
# http://stackoverflow.com/questions/6861355/mysqldump-launched-by-cron-and-password-security
# Pass in username and name of database to dump
mysql-backup() { mysqldump -u ${1} -p ${2} > ${2}.sql; }

# Pass in Username and database name
# Run in folder with a *.sql file, database name must equal .sql file's name too...
mysql-restore() {
  stty -echo;
  read -p "Password: " passw; echo
  stty echo;
  mysql-temp-store-pw ${1} $passw
  # if mysql --defaults-extra-file=mysql_helper_from_script$$ -e "create database ${2}" ; then
  if mysql -u${1} -p"$passw" -e "create database ${2}" ; then
    echo "created new db"
  else
    read -p "Delete existing database? [y,n]", should_delete_db
    if [ $should_delete_db == "y" ] ; then
      mysql -u${1} -p"$passw" -e "drop database ${2};create database ${2}"
      #mysql --defaults-extra-file=mysql_helper_from_script -e "drop database ${2}" &&
      #mysql --defaults-extra-file=mysql_helper_from_script -e "create database ${2}"
    else
      echo "No Action Performed"
      return 1
      #exit 1
    fi
  fi

  mysql -u${1} -p"$passw" ${2} < ${2}.sql;
  #mysql --defaults-extra-file=mysql_helper_from_script < ${2} < ${2}.sql

  #mysql -u${1} -p -e "create database ${2}" &&
  #mysql -u${1} -p ${2} < ${2}.sql;
  mysql-temp-clear-pw
}

mysql-rm-database() { mysql -u${1} -p -e "drop database ${2}"; }

mysql-temp-store-pw() { echo -e "[client]\nuser=${1}\npassword=${2}" > mysql_helper_from_script$$; }
mysql-temp-clear-pw() { rm mysql_helper_from_script$$; }


# Create database user and grant full access
#
# $  su; su postgres; psql
#
# > CREATE USER jack WITH PASSWORD 'password' CREATEDB SUPERUSER;

# Linux specific aliases
alias latest-installs='grep " install " /var/log/dpkg.*'
alias latest-upgrades='grep " upgrade " /var/log/dpkg.*'
alias latest-removes='grep " remove " /var/log/dpkg.*'

# Email Related
# http://forums.cpanel.net/f5/strange-bandwidth-usage-user-pop3-100161.html
# Get's a picture of how much data this user is downloading in there mail per 3 days or so
# grep user-name@domain.com /var/log/maillog | grep retr= | awk {'print $7" "$1" "$2" "$3" "$11'} | grep -v retr=0
scan-mail() { grep user-name@domain.com /var/log/maillog | grep retr= | awk {'print $7" "$1" "$2" "$3" "$11'} | grep -v retr=0; }
#alias scan-mail="grep user-name@domain-name.com /var/log/maillog | grep retr= | awk {'print $7\" \"$1\" \"$2\" \"$3\" \"$11'} | grep -v retr=0"
# This one sums all the bytes
#grep domain-name.net /var/log/maillog* | grep retr= | grep -v retr=0 | awk {'print $11'} | cut -d, -f1 | cut -d= -f2 | awk '{t += $1} END { print "total: ", t, " bytes transferred over POP3"}'
# pass in domain.com as parameter
scan-mail-sum() { grep 1 /var/log/maillog* | grep retr= | grep -v retr=0 | awk {'print $11'} | cut -d, -f1 | cut -d= -f2 | awk '{t += $1} END { print "total: ", t, " bytes transferred over POP3"}'; }


# Aliases to change the keyboard settings on a mac to copy/ paste be like windows
alias keyboard-restore="hidutil property --set '{\"UserKeyMapping\":[]}'"
alias keyboard-windows="hidutil property --set '{\"UserKeyMapping\": [{\"HIDKeyboardModifierMappingSrc\":0x7000000E0,\"HIDKeyboardModifierMappingDst\":0x7000000E3}, {\"HIDKeyboardModifierMappingSrc\":0x7000000E3,\"HIDKeyboardModifierMappingDst\":0x7000000E0}] }'"


